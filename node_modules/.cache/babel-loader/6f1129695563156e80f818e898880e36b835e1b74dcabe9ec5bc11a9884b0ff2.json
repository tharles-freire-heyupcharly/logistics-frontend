{"ast":null,"code":"import _objectWithoutProperties from \"/Users/tharles/logistics-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/tharles/logistics-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"pageParam\"],\n  _excluded2 = [\"pageParam\"];\nimport { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n  setOptions(options, notifyOptions) {\n    super.setOptions(_objectSpread(_objectSpread({}, options), {}, {\n      behavior: infiniteQueryBehavior()\n    }), notifyOptions);\n  }\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n  fetchNextPage() {\n    let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      {\n        pageParam\n      } = _ref,\n      options = _objectWithoutProperties(_ref, _excluded);\n    return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    }));\n  }\n  fetchPreviousPage() {\n    let _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      {\n        pageParam\n      } = _ref2,\n      options = _objectWithoutProperties(_ref2, _excluded2);\n    return this.fetch(_objectSpread(_objectSpread({}, options), {}, {\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    }));\n  }\n  createResult(query, options) {\n    var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    const {\n      isFetching,\n      isRefetching\n    } = result;\n    const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward';\n    const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward';\n    return _objectSpread(_objectSpread({}, result), {}, {\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    });\n  }\n}\nexport { InfiniteQueryObserver };","map":{"version":3,"names":["InfiniteQueryObserver","QueryObserver","constructor","client","options","bindMethods","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","_objectSpread","behavior","infiniteQueryBehavior","getOptimisticResult","_ref","arguments","length","undefined","pageParam","_objectWithoutProperties","_excluded","fetch","meta","fetchMore","direction","_ref2","_excluded2","createResult","query","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","_state$data","_state$data2","state","result","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","hasNextPage","data","pages","hasPreviousPage"],"sources":["/Users/tharles/logistics-frontend/node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts"],"sourcesContent":["import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}