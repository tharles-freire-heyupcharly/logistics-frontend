{"ast":null,"code":"import _objectWithoutProperties from \"/Users/tharles/logistics-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/tharles/logistics-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"fetchStatus\"];\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\nfunction dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const mutations = [];\n  const queries = [];\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n    mutationCache.build(client, _objectSpread(_objectSpread({}, options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations), {}, {\n      mutationKey: dehydratedMutation.mutationKey\n    }), dehydratedMutation.state);\n  });\n  queries.forEach(_ref => {\n    let {\n      queryKey,\n      state,\n      queryHash\n    } = _ref;\n    var _options$defaultOptio2;\n    const query = queryCache.get(queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const {\n            fetchStatus: _ignored\n          } = state,\n          dehydratedQueryState = _objectWithoutProperties(state, _excluded);\n        query.setState(dehydratedQueryState);\n      }\n      return;\n    } // Restore query\n\n    queryCache.build(client, _objectSpread(_objectSpread({}, options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries), {}, {\n      queryKey,\n      queryHash\n    }), // Reset fetch status to idle to avoid\n    // query being stuck in fetching state upon hydration\n    _objectSpread(_objectSpread({}, state), {}, {\n      fetchStatus: 'idle'\n    }));\n  });\n}\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"names":["dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","arguments","length","undefined","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","_options$defaultOptio","build","_objectSpread","defaultOptions","_ref","_options$defaultOptio2","get","dataUpdatedAt","fetchStatus","_ignored","dehydratedQueryState","_objectWithoutProperties","_excluded","setState"],"sources":["/Users/tharles/logistics-frontend/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach((mutation) => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach((query) => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash }) => {\n    const query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: 'idle',\n      },\n    )\n  })\n}\n"],"mappings":";;;AAUA;AAoCA;AAEA,SAASA,iBAATA,CAA2BC,QAA3B,EAAmE;EACjE,OAAO;IACLC,WAAW,EAAED,QAAQ,CAACE,OAAT,CAAiBD,WADzB;IAELE,KAAK,EAAEH,QAAQ,CAACG;GAFlB;AAID;AAGD;AACA;AACA;;AACA,SAASC,cAATA,CAAwBC,KAAxB,EAAuD;EACrD,OAAO;IACLF,KAAK,EAAEE,KAAK,CAACF,KADR;IAELG,QAAQ,EAAED,KAAK,CAACC,QAFX;IAGLC,SAAS,EAAEF,KAAK,CAACE;GAHnB;AAKD;AAEM,SAASC,8BAATA,CAAwCR,QAAxC,EAA4D;EACjE,OAAOA,QAAQ,CAACG,KAAT,CAAeM,QAAtB;AACD;AAEM,SAASC,2BAATA,CAAqCL,KAArC,EAAmD;EACxD,OAAOA,KAAK,CAACF,KAAN,CAAYQ,MAAZ,KAAuB,SAA9B;AACD;AAEM,SAASC,SAATA,CACLC,MADK,EAGY;EAAA,IADjBX,OAAyB,GAAAY,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAFvB;EAIL,MAAMG,SAA+B,GAAG,EAAxC;EACA,MAAMC,OAA0B,GAAG,EAAnC;EAEA,IAAIhB,OAAO,CAACiB,kBAAR,KAA+B,KAAnC,EAA0C;IACxC,MAAMC,uBAAuB,GAC3BlB,OAAO,CAACkB,uBAAR,IAAmCZ,8BADrC;IAGAK,MAAM,CACHQ,gBADH,EAEG,CAAAC,MAFH,GAGGC,OAHH,CAGYvB,QAAD,IAAc;MACrB,IAAIoB,uBAAuB,CAACpB,QAAD,CAA3B,EAAuC;QACrCiB,SAAS,CAACO,IAAV,CAAezB,iBAAiB,CAACC,QAAD,CAAhC;MACD;KANL;EAQD;EAED,IAAIE,OAAO,CAACuB,gBAAR,KAA6B,KAAjC,EAAwC;IACtC,MAAMC,oBAAoB,GACxBxB,OAAO,CAACwB,oBAAR,IAAgChB,2BADlC;IAGAG,MAAM,CACHc,aADH,EAEG,CAAAL,MAFH,GAGGC,OAHH,CAGYlB,KAAD,IAAW;MAClB,IAAIqB,oBAAoB,CAACrB,KAAD,CAAxB,EAAiC;QAC/Ba,OAAO,CAACM,IAAR,CAAapB,cAAc,CAACC,KAAD,CAA3B;MACD;KANL;EAQD;EAED,OAAO;IAAEY,SAAF;IAAaC;GAApB;AACD;AAEM,SAASU,OAATA,CACLf,MADK,EAELgB,eAFK,EAGL3B,OAHK,EAIC;EACN,IAAI,OAAO2B,eAAP,KAA2B,QAA3B,IAAuCA,eAAe,KAAK,IAA/D,EAAqE;IACnE;EACD;EAED,MAAMC,aAAa,GAAGjB,MAAM,CAACQ,gBAAP,EAAtB;EACA,MAAMU,UAAU,GAAGlB,MAAM,CAACc,aAAP,EAAnB,CANM;;EASN,MAAMV,SAAS,GAAIY,eAAD,CAAqCZ,SAArC,IAAkD,EAApE,CATM;;EAWN,MAAMC,OAAO,GAAIW,eAAD,CAAqCX,OAArC,IAAgD,EAAhE;EAEAD,SAAS,CAACM,OAAV,CAAmBS,kBAAD,IAAwB;IAAA,IAAAC,qBAAA;IACxCH,aAAa,CAACI,KAAd,CACErB,MADF,EAAAsB,aAAA,CAAAA,aAAA,KAGOjC,OAAH,qBAAA+B,qBAAA,GAAG/B,OAAO,CAAEkC,cAAZ,KAAG,gBAAAH,qBAAA,CAAyBhB,SAA5B;MACAhB,WAAW,EAAE+B,kBAAkB,CAAC/B;IAAA,IAElC+B,kBAAkB,CAAC7B,KANrB;GADF;EAWAe,OAAO,CAACK,OAAR,CAAgBc,IAAA,IAAoC;IAAA,IAAnC;MAAE/B,QAAF;MAAYH,KAAZ;MAAmBI;IAAnB,CAAD,GAAA8B,IAAA;IAAoC,IAAAC,sBAAA;IAClD,MAAMjC,KAAK,GAAG0B,UAAU,CAACQ,GAAX,CAAehC,SAAf,CAAd,CADkD;;IAIlD,IAAIF,KAAJ,EAAW;MACT,IAAIA,KAAK,CAACF,KAAN,CAAYqC,aAAZ,GAA4BrC,KAAK,CAACqC,aAAtC,EAAqD;QACnD;QACA;QACA,MAAM;YAAEC,WAAW,EAAEC;UAAf,IAAqDvC,KAA3D;UAAkCwC,oBAAA,GAAAC,wBAAA,CAAyBzC,KAA3D,EAAA0C,SAAA;QACAxC,KAAK,CAACyC,QAAN,CAAeH,oBAAf;MACD;MACD;IACD,CAZiD;;IAelDZ,UAAU,CAACG,KAAX,CACErB,MADF,EAAAsB,aAAA,CAAAA,aAAA,KAGOjC,OAAH,qBAAAoC,sBAAA,GAAGpC,OAAO,CAAEkC,cAAZ,KAAG,gBAAAE,sBAAA,CAAyBpB,OAA5B;MACAZ,QAFF;MAGEC;IAAA,IALJ;IAQE;IAAA4B,aAAA,CAAAA,aAAA,KAEKhC,KADL;MAEEsC,WAAW,EAAE;IAAA,EAXjB;GAfF;AA8BD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}