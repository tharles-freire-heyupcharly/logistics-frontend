import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { IoTServiceException as __BaseException } from "./IoTServiceException";
export const DetectMitigationActionExecutionStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SKIPPED: "SKIPPED",
    SUCCESSFUL: "SUCCESSFUL",
};
export const SbomValidationResult = {
    FAILED: "FAILED",
    SUCCEEDED: "SUCCEEDED",
};
export const SbomValidationErrorCode = {
    FILE_SIZE_LIMIT_EXCEEDED: "FILE_SIZE_LIMIT_EXCEEDED",
    INCOMPATIBLE_FORMAT: "INCOMPATIBLE_FORMAT",
};
export const ReportType = {
    ERRORS: "ERRORS",
    RESULTS: "RESULTS",
};
export const ViolationEventType = {
    ALARM_CLEARED: "alarm-cleared",
    ALARM_INVALIDATED: "alarm-invalidated",
    IN_ALARM: "in-alarm",
};
export class RegistrationCodeValidationException extends __BaseException {
    name = "RegistrationCodeValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RegistrationCodeValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RegistrationCodeValidationException.prototype);
    }
}
export class CertificateConflictException extends __BaseException {
    name = "CertificateConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CertificateConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CertificateConflictException.prototype);
    }
}
export class ResourceRegistrationFailureException extends __BaseException {
    name = "ResourceRegistrationFailureException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceRegistrationFailureException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceRegistrationFailureException.prototype);
    }
}
export class TaskAlreadyExistsException extends __BaseException {
    name = "TaskAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TaskAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TaskAlreadyExistsException.prototype);
    }
}
export class InvalidResponseException extends __BaseException {
    name = "InvalidResponseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidResponseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidResponseException.prototype);
    }
}
export class TransferConflictException extends __BaseException {
    name = "TransferConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TransferConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TransferConflictException.prototype);
    }
}
export const PackageVersionAction = {
    DEPRECATE: "DEPRECATE",
    PUBLISH: "PUBLISH",
};
export const UpdatePackageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.description && { description: SENSITIVE_STRING }),
});
export const UpdatePackageVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.description && { description: SENSITIVE_STRING }),
    ...(obj.attributes && { attributes: SENSITIVE_STRING }),
    ...(obj.recipe && { recipe: SENSITIVE_STRING }),
});
